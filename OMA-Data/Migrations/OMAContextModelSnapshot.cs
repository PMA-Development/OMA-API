// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OMA_Data.Data;

#nullable disable

namespace OMA_Data.Migrations
{
    [DbContext(typeof(OMAContext))]
    partial class OMAContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OMA_Data.Entities.Alarm", b =>
                {
                    b.Property<int>("AlarmID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlarmID"));

                    b.Property<int>("IslandFK")
                        .HasColumnType("int");

                    b.Property<int?>("TurbineFK")
                        .HasColumnType("int");

                    b.HasKey("AlarmID");

                    b.HasIndex("IslandFK");

                    b.HasIndex("TurbineFK");

                    b.ToTable("Alarms");
                });

            modelBuilder.Entity("OMA_Data.Entities.AlarmConfig", b =>
                {
                    b.Property<int>("AlarmConfigID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlarmConfigID"));

                    b.Property<int>("IslandFK")
                        .HasColumnType("int");

                    b.Property<int>("MaxAirPressure")
                        .HasColumnType("int");

                    b.Property<int>("MaxHumidity")
                        .HasColumnType("int");

                    b.Property<int>("MaxTemperature")
                        .HasColumnType("int");

                    b.Property<int>("MinAirPressure")
                        .HasColumnType("int");

                    b.Property<int>("MinHumidity")
                        .HasColumnType("int");

                    b.Property<int>("MinTemperature")
                        .HasColumnType("int");

                    b.HasKey("AlarmConfigID");

                    b.HasIndex("IslandFK");

                    b.ToTable("AlarmsConfig");
                });

            modelBuilder.Entity("OMA_Data.Entities.Attribute", b =>
                {
                    b.Property<int>("AttributeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SensorID")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttributeID");

                    b.HasIndex("SensorID");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("OMA_Data.Entities.Drone", b =>
                {
                    b.Property<int>("DroneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DroneID"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("TaskFK")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DroneID");

                    b.HasIndex("TaskFK");

                    b.ToTable("Drones");
                });

            modelBuilder.Entity("OMA_Data.Entities.Island", b =>
                {
                    b.Property<int>("IslandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IslandID"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TurbineFK")
                        .HasColumnType("int");

                    b.HasKey("IslandID");

                    b.HasIndex("TurbineFK");

                    b.ToTable("Islands");
                });

            modelBuilder.Entity("OMA_Data.Entities.Log", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserFK")
                        .HasColumnType("int");

                    b.HasKey("LogID");

                    b.HasIndex("UserFK");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("OMA_Data.Entities.Sensor", b =>
                {
                    b.Property<int>("SensorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SensorID"));

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SensorID");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("OMA_Data.Entities.Task", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinishDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerFK")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TurbineFK")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserFK")
                        .HasColumnType("int");

                    b.HasKey("TaskID");

                    b.HasIndex("OwnerFK");

                    b.HasIndex("TurbineFK");

                    b.HasIndex("UserFK");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("OMA_Data.Entities.Turbine", b =>
                {
                    b.Property<int>("TurbineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TurbineID"));

                    b.Property<int>("SensorFK")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TurbineID");

                    b.HasIndex("SensorFK");

                    b.ToTable("Turbine");
                });

            modelBuilder.Entity("OMA_Data.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("OMA_Data.Entities.Alarm", b =>
                {
                    b.HasOne("OMA_Data.Entities.Island", "Island")
                        .WithMany()
                        .HasForeignKey("IslandFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OMA_Data.Entities.Turbine", "Turbine")
                        .WithMany()
                        .HasForeignKey("TurbineFK");

                    b.Navigation("Island");

                    b.Navigation("Turbine");
                });

            modelBuilder.Entity("OMA_Data.Entities.AlarmConfig", b =>
                {
                    b.HasOne("OMA_Data.Entities.Island", "Island")
                        .WithMany()
                        .HasForeignKey("IslandFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Island");
                });

            modelBuilder.Entity("OMA_Data.Entities.Attribute", b =>
                {
                    b.HasOne("OMA_Data.Entities.Sensor", null)
                        .WithMany("Attributes")
                        .HasForeignKey("SensorID");
                });

            modelBuilder.Entity("OMA_Data.Entities.Drone", b =>
                {
                    b.HasOne("OMA_Data.Entities.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("OMA_Data.Entities.Island", b =>
                {
                    b.HasOne("OMA_Data.Entities.Turbine", "Turbine")
                        .WithMany()
                        .HasForeignKey("TurbineFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Turbine");
                });

            modelBuilder.Entity("OMA_Data.Entities.Log", b =>
                {
                    b.HasOne("OMA_Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OMA_Data.Entities.Task", b =>
                {
                    b.HasOne("OMA_Data.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OMA_Data.Entities.Turbine", "Turbine")
                        .WithMany()
                        .HasForeignKey("TurbineFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OMA_Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserFK");

                    b.Navigation("Owner");

                    b.Navigation("Turbine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OMA_Data.Entities.Turbine", b =>
                {
                    b.HasOne("OMA_Data.Entities.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("OMA_Data.Entities.Sensor", b =>
                {
                    b.Navigation("Attributes");
                });
#pragma warning restore 612, 618
        }
    }
}
